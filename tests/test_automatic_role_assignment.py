"""
Test pour v√©rifier l'assignation automatique du r√¥le "lecteur" lors de la cr√©ation d'un compte
"""
from django.test import TestCase
from django.contrib.auth.models import User
from blog.models import UserProfile, Role


class TestAutomaticRoleAssignment(TestCase):
    """Tests pour l'assignation automatique des r√¥les"""
    
    def setUp(self):
        """Initialisation des tests"""
        # S'assurer que les r√¥les par d√©faut existent
        Role.get_default_roles()
    
    def test_user_creation_assigns_lecteur_role(self):
        """Test que la cr√©ation d'un utilisateur lui assigne automatiquement le r√¥le lecteur"""
        # Cr√©er un nouvel utilisateur
        user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpassword123'
        )
        
        # V√©rifier que l'utilisateur a un profil
        self.assertTrue(hasattr(user, 'profile'))
        self.assertIsNotNone(user.profile)
        
        # V√©rifier que le r√¥le est "lecteur"
        self.assertEqual(user.profile.role.name, 'lecteur')
        
        print("‚úÖ Test assignation automatique r√¥le lecteur OK")
    
    def test_user_creation_with_superuser(self):
        """Test que m√™me les superusers re√ßoivent le r√¥le lecteur par d√©faut"""
        # Cr√©er un superuser
        superuser = User.objects.create_superuser(
            username='admin',
            email='admin@example.com',
            password='adminpassword123'
        )
        
        # V√©rifier que m√™me le superuser a un profil avec r√¥le lecteur par d√©faut
        self.assertTrue(hasattr(superuser, 'profile'))
        self.assertEqual(superuser.profile.role.name, 'lecteur')
        
        print("‚úÖ Test assignation automatique r√¥le lecteur pour superuser OK")
    
    def test_profile_creation_without_role(self):
        """Test la cr√©ation d'un profil sans r√¥le sp√©cifique (doit assigner lecteur)"""
        # Cr√©er un utilisateur
        user = User.objects.create_user(
            username='usertest2',
            email='test2@example.com',
            password='testpassword123'
        )
        
        # Supprimer le profil existant pour tester la cr√©ation manuelle
        if hasattr(user, 'profile'):
            user.profile.delete()
        
        # Cr√©er un nouveau profil sans sp√©cifier de r√¥le
        profile = UserProfile.objects.create(user=user)
        
        # V√©rifier que le r√¥le lecteur a √©t√© assign√© automatiquement
        self.assertEqual(profile.role.name, 'lecteur')
        
        print("‚úÖ Test cr√©ation manuelle profil sans r√¥le OK")
    
    def test_role_defaults_exist(self):
        """Test que les r√¥les par d√©faut sont bien cr√©√©s"""
        default_roles = Role.get_default_roles()
        
        # V√©rifier que tous les r√¥les par d√©faut existent
        self.assertIn('lecteur', default_roles)
        self.assertIn('journaliste', default_roles)
        self.assertIn('admin', default_roles)
        
        # V√©rifier qu'ils sont bien des instances de Role
        self.assertIsInstance(default_roles['lecteur'], Role)
        self.assertIsInstance(default_roles['journaliste'], Role)
        self.assertIsInstance(default_roles['admin'], Role)
        
        # V√©rifier que les noms sont corrects
        self.assertEqual(default_roles['lecteur'].name, 'lecteur')
        self.assertEqual(default_roles['journaliste'].name, 'journaliste')
        self.assertEqual(default_roles['admin'].name, 'admin')
        
        print("‚úÖ Test r√¥les par d√©faut OK")
    
    def test_multiple_users_creation(self):
        """Test la cr√©ation de plusieurs utilisateurs successifs"""
        users_data = [
            {'username': 'user1', 'email': 'user1@example.com'},
            {'username': 'user2', 'email': 'user2@example.com'},
            {'username': 'user3', 'email': 'user3@example.com'},
        ]
        
        for user_data in users_data:
            user = User.objects.create_user(
                username=user_data['username'],
                email=user_data['email'],
                password='password123'
            )
            
            # V√©rifier que chaque utilisateur a le r√¥le lecteur
            self.assertTrue(hasattr(user, 'profile'))
            self.assertEqual(user.profile.role.name, 'lecteur')
        
        print("‚úÖ Test cr√©ation multiple utilisateurs OK")


if __name__ == '__main__':
    # Ex√©cution directe du test
    import django
    import os
    import sys
    
    # Configuration Django
    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'monprojet.settings')
    django.setup()
    
    # Ex√©cution des tests
    test_case = TestAutomaticRoleAssignment()
    test_case.setUp()
    
    try:
        test_case.test_user_creation_assigns_lecteur_role()
        test_case.test_user_creation_with_superuser()
        test_case.test_profile_creation_without_role()
        test_case.test_role_defaults_exist()
        test_case.test_multiple_users_creation()
        
        print("\nüéâ Tous les tests d'assignation automatique des r√¥les sont pass√©s avec succ√®s!")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()
