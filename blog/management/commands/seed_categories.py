from django.core.management.base import BaseCommand
from blog.models import Category
from django.utils import timezone
import logging

logger = logging.getLogger('blog')

class Command(BaseCommand):
    help = 'Cr√©er des cat√©gories d\'articles pour l\'application'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ D√©but du seeding des cat√©gories...'))
        
        categories_data = [
            {
                'nom': 'Actualit√©s',
                'description': 'Les derni√®res nouvelles et √©v√©nements d\'actualit√©'
            },
            {
                'nom': 'Technologie',
                'description': 'Articles sur les nouvelles technologies, l\'innovation et le num√©rique'
            },
            {
                'nom': 'Sport',
                'description': 'Actualit√©s sportives, r√©sultats et analyses'
            },
            {
                'nom': 'Culture',
                'description': 'Arts, litt√©rature, cin√©ma et √©v√©nements culturels'
            },
            {
                'nom': '√âconomie',
                'description': 'Analyses √©conomiques, march√©s financiers et entreprises'
            },
            {
                'nom': 'Sant√©',
                'description': 'Conseils sant√©, recherches m√©dicales et bien-√™tre'
            },
            {
                'nom': 'Environnement',
                'description': '√âcologie, d√©veloppement durable et changement climatique'
            },
            {
                'nom': 'Politique',
                'description': 'Actualit√©s politiques nationales et internationales'
            },
            {
                'nom': 'Sciences',
                'description': 'D√©couvertes scientifiques et recherches acad√©miques'
            },
            {
                'nom': 'Voyage',
                'description': 'Destinations, conseils de voyage et d√©couvertes culturelles'
            },
        ]
        
        created_count = 0
        existing_count = 0
        
        for category_data in categories_data:
            category, created = Category.objects.get_or_create(
                nom=category_data['nom'],
                defaults={
                    'description': category_data['description'],
                    'date_creation': timezone.now()
                }
            )
            
            if created:
                created_count += 1
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ Cat√©gorie cr√©√©e: {category.nom}')
                )
                logger.info(f"Cat√©gorie cr√©√©e lors du seeding: {category.nom}")
            else:
                existing_count += 1
                self.stdout.write(
                    self.style.WARNING(f'‚ö†Ô∏è  Cat√©gorie existante: {category.nom}')
                )
        
        self.stdout.write(
            self.style.SUCCESS(
                f'\nüìä R√©sum√© du seeding des cat√©gories:\n'
                f'   - Cat√©gories cr√©√©es: {created_count}\n'
                f'   - Cat√©gories existantes: {existing_count}\n'
                f'   - Total: {created_count + existing_count}'
            )
        )
