from django.core.management.base import BaseCommand
from blog.models import Article, Comment
from django.utils import timezone
import random
import logging

logger = logging.getLogger('blog')

class Command(BaseCommand):
    help = 'Cr√©er des commentaires de test pour les articles'

    def add_arguments(self, parser):
        parser.add_argument(
            '--count',
            type=int,
            default=50,
            help='Nombre de commentaires √† cr√©er (d√©faut: 50)'
        )

    def handle(self, *args, **options):
        count = options['count']
        self.stdout.write(self.style.SUCCESS(f'üöÄ D√©but du seeding de {count} commentaires...'))
        
        # R√©cup√©rer les articles existants
        articles = list(Article.objects.all())
        if not articles:
            self.stdout.write(
                self.style.ERROR(
                    '‚ùå Aucun article trouv√©. Ex√©cutez d\'abord: python manage.py seed_articles'
                )
            )
            return
        
        commentateurs = [
            {'nom': 'Alice Dubois', 'email': 'alice.dubois@email.com'},
            {'nom': 'Bob Martin', 'email': 'bob.martin@email.com'},
            {'nom': 'Claire Rousseau', 'email': 'claire.rousseau@email.com'},
            {'nom': 'David Leroy', 'email': 'david.leroy@email.com'},
            {'nom': 'Emma Girard', 'email': 'emma.girard@email.com'},
            {'nom': 'Fran√ßois Meyer', 'email': 'francois.meyer@email.com'},
            {'nom': 'Gabrielle Simon', 'email': 'gabrielle.simon@email.com'},
            {'nom': 'Henri Faure', 'email': 'henri.faure@email.com'},
            {'nom': 'Isabelle Roy', 'email': 'isabelle.roy@email.com'},
            {'nom': 'Julien Morel', 'email': 'julien.morel@email.com'},
        ]
        
        commentaires_positifs = [
            "Excellent article ! Tr√®s instructif et bien √©crit.",
            "Merci pour ce partage, j'ai appris beaucoup de choses.",
            "Analyse tr√®s pertinente, bravo pour ce travail de qualit√©.",
            "Article tr√®s int√©ressant, j'attends la suite avec impatience.",
            "Parfait ! Exactement ce que je cherchais comme information.",
            "Tr√®s bon point de vue, merci pour cet √©clairage.",
            "Article de qualit√©, bien document√© et accessible.",
            "Formidable ! Cette lecture √©tait tr√®s enrichissante.",
            "Merci pour ce contenu de qualit√©, tr√®s utile.",
            "Excellente synth√®se, f√©licitations √† l'auteur."
        ]
        
        commentaires_neutres = [
            "Int√©ressant, m√™me si j'aurais aim√© plus de d√©tails sur certains points.",
            "Bon article dans l'ensemble, quelques aspects m√©riteraient d'√™tre approfondis.",
            "Point de vue int√©ressant, il y aurait d'autres angles √† explorer.",
            "Article correct, mais j'ai trouv√© des informations similaires ailleurs.",
            "Pas mal, m√™me si certains exemples auraient pu √™tre plus concrets.",
            "Lecture instructive, malgr√© quelques longueurs.",
            "Contenu solide, qui gagnerait √† √™tre un peu plus synth√©tique.",
            "Bonne base de r√©flexion, √† compl√©ter avec d'autres sources.",
            "Article informatif, qui pose les bonnes questions.",
            "Approche int√©ressante, m√™me si perfectible sur certains aspects."
        ]
        
        commentaires_questions = [
            "Tr√®s int√©ressant ! Auriez-vous des sources pour aller plus loin ?",
            "Merci pour cet article. O√π peut-on trouver plus d'informations sur ce sujet ?",
            "Article passionnant ! Y a-t-il des √©tudes r√©centes sur cette question ?",
            "Excellent travail ! Pr√©voyez-vous un article de suivi ?",
            "Tr√®s informatif ! Existe-t-il des applications pratiques de ces concepts ?",
            "Merci pour ce partage ! Connaissez-vous d'autres experts sur ce sujet ?",
            "Article captivant ! Y a-t-il des formations disponibles dans ce domaine ?",
            "Tr√®s utile ! Avez-vous des recommandations de lecture compl√©mentaire ?",
            "Fascinant ! Quelles sont les prochaines √©tapes de recherche ?",
            "Merci ! Pourriez-vous nous en dire plus sur les implications pratiques ?"
        ]
        
        created_count = 0
        
        for i in range(count):
            article = random.choice(articles)
            commentateur = random.choice(commentateurs)
            
            # Choisir un type de commentaire
            comment_type = random.choice(['positif', 'neutre', 'question'])
            if comment_type == 'positif':
                contenu = random.choice(commentaires_positifs)
            elif comment_type == 'neutre':
                contenu = random.choice(commentaires_neutres)
            else:
                contenu = random.choice(commentaires_questions)
            
            # Cr√©er une date al√©atoire apr√®s la cr√©ation de l'article
            days_after_article = random.randint(0, 30)
            date_creation = article.date_creation + timezone.timedelta(days=days_after_article)
            
            # Si la date est dans le futur, la ramener √† maintenant
            if date_creation > timezone.now():
                date_creation = timezone.now() - timezone.timedelta(hours=random.randint(1, 48))
            
            # Probabilit√© d'approbation (80% approuv√©s)
            is_approved = random.random() < 0.8
            
            comment = Comment.objects.create(
                article=article,
                nom=commentateur['nom'],
                email=commentateur['email'],
                contenu=contenu,
                date_creation=date_creation,
                is_approved=is_approved
            )
            
            created_count += 1
            approval_status = "‚úÖ approuv√©" if is_approved else "‚è≥ en attente"
            self.stdout.write(
                self.style.SUCCESS(
                    f'‚úÖ Commentaire cr√©√©: {commentateur["nom"]} sur "{article.titre[:30]}..." ({approval_status})'
                )
            )
            logger.info(f"Commentaire cr√©√© lors du seeding: {commentateur['nom']} sur {article.titre}")
        
        # Cr√©er quelques r√©ponses aux commentaires
        comments_with_replies = random.sample(
            list(Comment.objects.filter(parent=None)), 
            min(5, Comment.objects.filter(parent=None).count())
        )
        
        replies_count = 0
        for parent_comment in comments_with_replies:
            # 1-2 r√©ponses par commentaire s√©lectionn√©
            num_replies = random.randint(1, 2)
            for _ in range(num_replies):
                commentateur = random.choice(commentateurs)
                contenu = random.choice([
                    f"@{parent_comment.nom} Merci pour votre commentaire, tr√®s pertinent !",
                    f"@{parent_comment.nom} Je partage votre point de vue.",
                    f"@{parent_comment.nom} Int√©ressant, je n'avais pas pens√© √† cet aspect.",
                    f"@{parent_comment.nom} Exactement ! Vous avez r√©sum√© ma pens√©e.",
                    f"@{parent_comment.nom} Merci pour cet √©clairage suppl√©mentaire."
                ])
                
                date_creation = parent_comment.date_creation + timezone.timedelta(
                    hours=random.randint(1, 72)
                )
                if date_creation > timezone.now():
                    date_creation = timezone.now() - timezone.timedelta(minutes=random.randint(30, 120))
                
                Comment.objects.create(
                    article=parent_comment.article,
                    nom=commentateur['nom'],
                    email=commentateur['email'],
                    contenu=contenu,
                    date_creation=date_creation,
                    is_approved=True,
                    parent=parent_comment
                )
                replies_count += 1
        
        self.stdout.write(
            self.style.SUCCESS(
                f'\nüìä R√©sum√© du seeding des commentaires:\n'
                f'   - Commentaires cr√©√©s: {created_count}\n'
                f'   - R√©ponses cr√©√©es: {replies_count}\n'
                f'   - Articles comment√©s: {len(set(Comment.objects.values_list("article_id", flat=True)))}\n'
                f'   - Commentateurs diff√©rents: {len(commentateurs)}'
            )
        )
