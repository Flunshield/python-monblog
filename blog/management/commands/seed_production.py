from django.core.management.base import BaseCommand
from blog.models import Role, Category
from django.contrib.auth.models import User
from django.utils import timezone
import logging

logger = logging.getLogger('blog')

class Command(BaseCommand):
    help = 'Cr√©er uniquement les donn√©es essentielles pour la production'

    def add_arguments(self, parser):
        parser.add_argument(
            '--admin-password',
            type=str,
            default='ProdAdmin2024!',
            help='Mot de passe pour le compte admin (d√©faut: ProdAdmin2024!)'
        )
        parser.add_argument(
            '--skip-if-exists',
            action='store_true',
            help='Ignorer si des donn√©es existent d√©j√†'
        )

    def handle(self, *args, **options):
        admin_password = options['admin_password']
        skip_if_exists = options['skip_if_exists']
        
        self.stdout.write(self.style.SUCCESS('üöÄ Seeding production - donn√©es essentielles...'))
        
        # V√©rifier si des donn√©es existent d√©j√†
        if skip_if_exists:
            if Role.objects.exists() and Category.objects.exists() and User.objects.exists():
                self.stdout.write(
                    self.style.WARNING('‚ö†Ô∏è Donn√©es d√©j√† pr√©sentes - seeding ignor√©')
                )
                return
        
        # 1. Cr√©er les r√¥les essentiels
        roles_data = [
            {'name': 'lecteur'},
            {'name': 'journaliste'},
            {'name': 'admin'},
        ]
        
        self.stdout.write('üìã Cr√©ation des r√¥les essentiels...')
        for role_data in roles_data:
            role, created = Role.objects.get_or_create(name=role_data['name'])
            if created:
                self.stdout.write(f'  ‚úÖ R√¥le cr√©√©: {role.name}')
            else:
                self.stdout.write(f'  ‚ö†Ô∏è R√¥le existant: {role.name}')
        
        # 2. Cr√©er les cat√©gories essentielles
        categories_data = [
            {'nom': 'Actualit√©s', 'description': 'Actualit√©s g√©n√©rales'},
            {'nom': 'Technologie', 'description': 'Actualit√©s technologiques'},
            {'nom': '√âconomie', 'description': 'Actualit√©s √©conomiques'},
        ]
        
        self.stdout.write('üìÇ Cr√©ation des cat√©gories essentielles...')
        for cat_data in categories_data:
            category, created = Category.objects.get_or_create(
                nom=cat_data['nom'],
                defaults={
                    'description': cat_data['description'],
                    'date_creation': timezone.now()
                }
            )
            if created:
                self.stdout.write(f'  ‚úÖ Cat√©gorie cr√©√©e: {category.nom}')
            else:
                self.stdout.write(f'  ‚ö†Ô∏è Cat√©gorie existante: {category.nom}')
          # 3. Cr√©er les comptes essentiels pour la production
        from blog.models import UserProfile
        
        # Donn√©es des utilisateurs essentiels
        essential_users = [
            {
                'username': 'admin',
                'email': 'admin@monprojet.com',
                'first_name': 'Admin',
                'last_name': 'Principal',
                'role': 'admin',
                'is_staff': True,
                'is_superuser': True
            },
            {
                'username': 'journaliste',
                'email': 'journaliste@monprojet.com',
                'first_name': 'Jean',
                'last_name': 'Journaliste',
                'role': 'journaliste',
                'is_staff': True,
                'is_superuser': False
            },
            {
                'username': 'lecteur',
                'email': 'lecteur@monprojet.com',
                'first_name': 'Marie',
                'last_name': 'Lectrice',
                'role': 'lecteur',
                'is_staff': False,
                'is_superuser': False
            }
        ]
        
        self.stdout.write('üë• Cr√©ation des comptes essentiels...')
        
        created_users = []
        existing_users = []
        
        for user_data in essential_users:
            # V√©rifier si l'utilisateur existe d√©j√†
            if not User.objects.filter(username=user_data['username']).exists():
                # Cr√©er l'utilisateur
                user = User.objects.create_user(
                    username=user_data['username'],
                    email=user_data['email'],
                    password=admin_password,
                    first_name=user_data['first_name'],
                    last_name=user_data['last_name'],
                    is_staff=user_data['is_staff'],
                    is_superuser=user_data['is_superuser'],
                    is_active=True,
                    date_joined=timezone.now()
                )
                
                # Cr√©er le profil avec le bon r√¥le
                role = Role.objects.get(name=user_data['role'])
                UserProfile.objects.create(
                    user=user,
                    role=role,
                    date_creation=timezone.now()
                )
                
                created_users.append(user_data)
                self.stdout.write(
                    self.style.SUCCESS(
                        f'  ‚úÖ Compte cr√©√©: {user_data["username"]} ({user_data["role"]})'
                    )
                )
                logger.info(f"Compte cr√©√© en production: {user_data['username']} avec r√¥le {user_data['role']}")
            else:
                existing_users.append(user_data)
                self.stdout.write(
                    self.style.WARNING(
                        f'  ‚ö†Ô∏è Compte existant: {user_data["username"]}'
                    )
                )
        
        # Afficher le r√©sum√©
        if created_users:
            self.stdout.write(
                self.style.SUCCESS(
                    f'\nüìä Comptes cr√©√©s ({len(created_users)}):\n' +
                    '\n'.join([
                        f'   - {user["username"]} ({user["email"]}) - R√¥le: {user["role"]}'
                        for user in created_users
                    ]) +
                    f'\n   - Mot de passe pour tous: {admin_password}'
                )
            )
        
        if existing_users:
            self.stdout.write(
                self.style.WARNING(
                    f'\n‚ö†Ô∏è Comptes existants ignor√©s ({len(existing_users)}): ' +
                    ', '.join([user['username'] for user in existing_users])
                )
            )
        
        self.stdout.write(
            self.style.SUCCESS(
                '\nüéâ Seeding production termin√© !\n'
                'Les donn√©es essentielles ont √©t√© cr√©√©es.'
            )
        )
