# Generated by Django 5.2.1 on 2025-06-04 17:56

import django.db.models.deletion
from django.db import migrations, models


def create_roles_and_migrate_data(apps, schema_editor):
    """Créer les rôles et migrer les données existantes"""
    Role = apps.get_model('blog', 'Role')
    UserProfile = apps.get_model('blog', 'UserProfile')
    
    # Créer les rôles par défaut
    lecteur_role, _ = Role.objects.get_or_create(name='lecteur')
    journaliste_role, _ = Role.objects.get_or_create(name='journaliste')
    admin_role, _ = Role.objects.get_or_create(name='admin')
    
    role_mapping = {
        'lecteur': lecteur_role,
        'journaliste': journaliste_role,
        'admin': admin_role
    }
    
    # Migrer les profils utilisateur existants
    for profile in UserProfile.objects.all():
        old_role = profile.role
        if old_role in role_mapping:
            profile.role_new = role_mapping[old_role]
        else:
            # Valeur par défaut pour les rôles non reconnus
            profile.role_new = lecteur_role
        profile.save()


def reverse_migration(apps, schema_editor):
    """Fonction inverse pour annuler la migration"""
    UserProfile = apps.get_model('blog', 'UserProfile')
    
    # Restaurer les anciens rôles basés sur les nouveaux
    for profile in UserProfile.objects.all():
        if hasattr(profile, 'role_new') and profile.role_new:
            profile.role = profile.role_new.name
            profile.save()


class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0008_add_comment_is_deleted'),
    ]

    operations = [
        # 1. Créer le modèle Role
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Rôle',
                'verbose_name_plural': 'Rôles',
                'ordering': ['name'],
            },
        ),
        
        # 2. Ajouter un champ temporaire pour la nouvelle relation
        migrations.AddField(
            model_name='userprofile',
            name='role_new',
            field=models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.PROTECT, to='blog.role'),
        ),
        
        # 3. Migrer les données
        migrations.RunPython(create_roles_and_migrate_data, reverse_migration),
        
        # 4. Supprimer l'ancien champ
        migrations.RemoveField(
            model_name='userprofile',
            name='role',
        ),
        
        # 5. Renommer le nouveau champ
        migrations.RenameField(
            model_name='userprofile',
            old_name='role_new',
            new_name='role',
        ),
        
        # 6. Rendre le champ obligatoire
        migrations.AlterField(
            model_name='userprofile',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='blog.role'),
        ),
    ]
