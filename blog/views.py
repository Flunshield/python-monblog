from django.contrib import messages
from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponse, HttpResponseForbidden
from django.utils.translation import gettext_lazy as _
from django.contrib.auth import authenticate, login, logout, get_user_model
from django.contrib.auth.forms import AuthenticationForm, PasswordResetForm, SetPasswordForm
from django.contrib.auth.tokens import default_token_generator
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.utils.encoding import force_bytes, force_str
from django.contrib.sites.shortcuts import get_current_site
from django.contrib.auth.decorators import login_required
from django.conf import settings
from django.http import JsonResponse
from django.views.decorators.http import require_POST
from django.views.decorators.csrf import csrf_exempt
from django.db import models
from django.db.models import Q, Count, Case, When, IntegerField
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
import logging
import re
import json
from .forms import ArticleForm, CommentForm, CategoryForm, SearchForm, CommentReplyForm
from .models import Article, Category, UserProfile, Like, Comment
from .forms_user import UserCreationForm
from .services.gemini_service import GeminiService

# Configuration du logger pour ce module
logger = logging.getLogger('blog')


def home(request):
    """
    Page d'accueil optimis√©e avec articles r√©cents et populaires
    """
    logger.info(f"Acc√®s √† la page d'accueil par l'utilisateur {request.user}")
    
    try:
        # Optimisation des requ√™tes avec select_related et prefetch_related
        base_queryset = Article.objects.select_related('category').prefetch_related('likes', 'comments')
        
        # Articles r√©cents (limite √† 10)
        articles_recents = base_queryset.order_by('-date_creation')[:10]
        
        # Articles populaires bas√©s sur le nombre de likes (limite √† 10)
        articles_populaires = base_queryset.annotate(
            total_likes=models.Count('likes')
        ).order_by('-total_likes', '-date_creation')[:10]
        
        # Cat√©gories pour le filtre
        categories = Category.objects.all()
        
        # Filtrage par cat√©gorie si demand√©
        category_filter = request.GET.get('category')
        if category_filter:
            logger.debug(f"Filtrage par cat√©gorie: {category_filter}")
            articles_recents = articles_recents.filter(category_id=category_filter)
            articles_populaires = articles_populaires.filter(category_id=category_filter)
        
        logger.debug(f"Articles r√©cents: {len(articles_recents)}, Articles populaires: {len(articles_populaires)}")
        
        context = {
            'articles_recents': articles_recents,
            'articles_populaires': articles_populaires,
            'categories': categories,
            'selected_category': int(category_filter) if category_filter else None,
        }
        return render(request, 'blog/home.html', context)
    
    except Exception as e:
        logger.error(f"Erreur lors du chargement de la page d'accueil: {e}")
        messages.error(request, _('Une erreur est survenue lors du chargement de la page.'))
        return render(request, 'blog/home.html', {
            'articles_recents': [],
            'articles_populaires': [],
            'categories': []
        })


def tous_les_articles(request):
    """
    Vue pour afficher tous les articles avec pagination
    """
    logger.info(f"Acc√®s √† la liste compl√®te des articles par l'utilisateur {request.user}")
    
    try:
        articles = Article.objects.select_related('category').prefetch_related('likes', 'comments')
        categories = Category.objects.all()
        category_filter = request.GET.get('category')
        
        if category_filter:
            logger.debug(f"Filtrage par cat√©gorie: {category_filter}")
            articles = articles.filter(category_id=category_filter)
        
        logger.debug(f"Nombre d'articles trouv√©s: {articles.count()}")
        
        context = {
            'articles': articles,
            'categories': categories,
            'selected_category': int(category_filter) if category_filter else None,
            'page_title': _('Tous les articles')
        }
        return render(request, 'blog/tous_les_articles.html', context)
    
    except Exception as e:
        logger.error(f"Erreur lors du chargement de la liste des articles: {e}")
        messages.error(request, _('Une erreur est survenue lors du chargement de la page.'))
        return render(request, 'blog/tous_les_articles.html', {'articles': [], 'categories': []})


def ajouter_article(request):
    logger.info(f"Tentative d'ajout d'article par l'utilisateur {request.user}")
    
    if request.method == 'POST':
        form = ArticleForm(request.POST, request.FILES)
        if form.is_valid():
            try:
                article = form.save()
                logger.info(f"Article '{article.titre}' cr√©√© avec succ√®s par {request.user}")
                messages.success(request, _('Article ajout√© avec succ√®s!'))
                return redirect('home')
            except Exception as e:
                logger.error(f"Erreur lors de la sauvegarde de l'article: {e}")
                messages.error(request, _('Erreur lors de la sauvegarde de l\'article.'))
        else:
            logger.warning(f"Formulaire d'article invalide pour l'utilisateur {request.user}: {form.errors}")
    else:
        # Pr√©-remplir le champ auteur avec l'username de l'utilisateur connect√©
        initial_data = {}
        if request.user.is_authenticated:
            initial_data['auteur'] = request.user.username
            logger.debug(f"Pr√©-remplissage du formulaire avec l'auteur: {request.user.username}")
        
        # R√©cup√©rer les param√®tres GET pour pr√©-remplir avec du contenu g√©n√©r√© par IA
        titre_param = request.GET.get('titre')
        contenu_param = request.GET.get('contenu')
        
        if titre_param:
            initial_data['titre'] = titre_param
            logger.debug(f"Pr√©-remplissage du titre depuis param√®tre GET: {titre_param[:50]}...")
            
        if contenu_param:
            initial_data['contenu'] = contenu_param
            logger.debug(f"Pr√©-remplissage du contenu depuis param√®tre GET: {len(contenu_param)} caract√®res")
            # Ajouter un message d'information si le contenu provient de l'IA
            messages.info(request, _('Le contenu a √©t√© pr√©-rempli avec l\'article g√©n√©r√© par IA. Vous pouvez le modifier avant de publier.'))
        
        form = ArticleForm(initial=initial_data)

    return render(request, 'blog/ajouter_article.html', {'form': form})


@login_required
@require_POST
def generate_article_with_ai(request):
    """
    Vue AJAX pour g√©n√©rer un article avec l'IA Gemini
    """
    logger.info(f"ü§ñ Requ√™te re√ßue pour g√©n√©ration d'article - M√©thode: {request.method}, User: {request.user}")
    
    try:
        # V√©rifier que l'utilisateur peut cr√©er des articles
        try:
            profile = request.user.profile
            if profile.role.name not in ['journaliste', 'admin']:
                return JsonResponse({
                    'success': False,
                    'error': 'Acc√®s interdit : seuls les journalistes et administrateurs peuvent utiliser l\'IA.'
                }, status=403)
        except UserProfile.DoesNotExist:
            return JsonResponse({
                'success': False,
                'error': 'Profil utilisateur non trouv√©.'
            }, status=403)
        
        # R√©cup√©rer les donn√©es de la requ√™te
        data = json.loads(request.body)
        resume = data.get('resume', '').strip()
        
        if not resume:
            return JsonResponse({
                'success': False,
                'error': 'Le r√©sum√© est requis pour g√©n√©rer un article.'
            })
        
        if len(resume) < 10:
            return JsonResponse({
                'success': False,
                'error': 'Le r√©sum√© doit contenir au moins 10 caract√®res.'
            })
        
        logger.info(f"G√©n√©ration d'article IA demand√©e par {request.user.username}")
        
        # Initialiser le service Gemini
        try:
            gemini_service = GeminiService()
        except Exception as e:
            logger.error(f"Erreur d'initialisation Gemini: {e}")
            return JsonResponse({
                'success': False,
                'error': 'Service IA temporairement indisponible. Veuillez r√©essayer plus tard.'
            })
        
        # D√©tecter la langue pr√©f√©r√©e de l'utilisateur (par d√©faut fran√ßais)
        langue = request.LANGUAGE_CODE if hasattr(request, 'LANGUAGE_CODE') else 'fr'
        
        # G√©n√©rer le contenu
        try:
            result = gemini_service.generate_article_content(resume, langue)
            
            logger.info(f"Article g√©n√©r√© avec succ√®s pour {request.user.username}")
            
            return JsonResponse({
                'success': True,
                'titre': result['titre'],
                'contenu': result['contenu']
            })
            
        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration d'article: {e}")
            return JsonResponse({
                'success': False,
                'error': 'Erreur lors de la g√©n√©ration. Veuillez v√©rifier votre r√©sum√© et r√©essayer.'
            })
    
    except json.JSONDecodeError:
        return JsonResponse({
            'success': False,
            'error': 'Format de donn√©es invalide.'
        })
    except Exception as e:
        logger.error(f"Erreur inattendue dans generate_article_with_ai: {e}")
        return JsonResponse({
            'success': False,
            'error': 'Une erreur inattendue s\'est produite.'
        })


@login_required
def gemini_generator_page(request):
    """
    Page d√©di√©e pour g√©n√©rer des articles avec l'API Gemini
    """
    try:
        # V√©rifier que l'utilisateur peut cr√©er des articles
        profile = request.user.profile
        if profile.role.name not in ['journaliste', 'admin']:
            return HttpResponseForbidden("Acc√®s interdit : seuls les journalistes et administrateurs peuvent utiliser l'IA.")
    except UserProfile.DoesNotExist:
        from .models import Role
        default_roles = Role.get_default_roles()
        UserProfile.objects.create(user=request.user, role=default_roles['lecteur'])
        return HttpResponseForbidden("Acc√®s interdit : seuls les journalistes et administrateurs peuvent utiliser l'IA.")
    
    # Tester la connexion Gemini
    gemini_available = False
    try:
        gemini_service = GeminiService()
        gemini_available = gemini_service.test_connection()
    except Exception as e:
        logger.error(f"Erreur de connexion Gemini: {e}")
    
    context = {
        'title': 'G√©n√©rateur d\'articles IA',
        'gemini_available': gemini_available,
        'user_role': profile.role.name,
    }
    
    return render(request, 'blog/gemini_generator.html', context)


@login_required
def ajouter_categorie(request):    # V√©rifier que l'utilisateur est administrateur
    try:
        profile = request.user.profile
        if profile.role.name != 'admin':
            return HttpResponseForbidden("Acc√®s interdit : seuls les administrateurs peuvent g√©rer les cat√©gories.")
    except UserProfile.DoesNotExist:
        from .models import Role
        default_roles = Role.get_default_roles()
        UserProfile.objects.create(user=request.user, role=default_roles['lecteur'])
        return HttpResponseForbidden("Acc√®s interdit : seuls les administrateurs peuvent g√©rer les cat√©gories.")
    
    if request.method == 'POST':
        form = CategoryForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, _('Cat√©gorie ajout√©e avec succ√®s!'))
            return redirect('home')
    else:
        form = CategoryForm()

    return render(request, 'blog/ajouter_categorie.html', {'form': form})


def article_detail(request, article_id):
    article = get_object_or_404(Article, id=article_id)
      # Afficher seulement les commentaires approuv√©s aux visiteurs
    # Les mod√©rateurs peuvent voir tous les commentaires
    if request.user.is_authenticated:
        try:
            profile = request.user.profile
            if profile.role.name in ['journaliste', 'admin']:
                # Les journalistes voient tous les commentaires sur leurs articles
                # Les admins voient tous les commentaires
                if profile.role.name == 'admin' or article.auteur.lower() == request.user.username.lower():
                    comments = article.comments.all()
                else:
                    comments = article.comments.filter(is_approved=True)
            else:
                comments = article.comments.filter(is_approved=True)
        except UserProfile.DoesNotExist:
            comments = article.comments.filter(is_approved=True)
    else:
        comments = article.comments.filter(is_approved=True)

    if request.method == 'POST':
        comment_form = CommentForm(request.POST)
        if comment_form.is_valid():
            comment = comment_form.save(commit=False)
            comment.article = article
            # Les nouveaux commentaires n√©cessitent une approbation
            comment.is_approved = False
            comment.save()
            messages.success(request, _('Commentaire ajout√© avec succ√®s! Il sera visible apr√®s mod√©ration.'))
            return redirect('article_detail', article_id=article.id)
    else:
        comment_form = CommentForm()

    context = {
        'article': article,
        'comments': comments,
        'comment_form': comment_form,
    }
    return render(request, 'blog/article_detail.html', context)


@login_required
def gerer_categories(request):
    """Vue pour afficher la liste des cat√©gories avec options de gestion"""    # V√©rifier que l'utilisateur est journaliste ou administrateur
    try:
        profile = request.user.profile
        if profile.role.name not in ['journaliste', 'admin']:
            return HttpResponseForbidden("Acc√®s interdit : seuls les journalistes et administrateurs peuvent consulter les cat√©gories.")
    except UserProfile.DoesNotExist:
        from .models import Role
        default_roles = Role.get_default_roles()
        UserProfile.objects.create(user=request.user, role=default_roles['lecteur'])
        return HttpResponseForbidden("Acc√®s interdit : seuls les journalistes et administrateurs peuvent consulter les cat√©gories.")
    
    categories = Category.objects.all()
    context = {
        'categories': categories,
        'user_role': profile.role.name,  # Passer le r√¥le pour contr√¥ler l'affichage des boutons
    }
    return render(request, 'blog/gerer_categories.html', context)


@login_required
def modifier_categorie(request, category_id):
    """Vue pour modifier une cat√©gorie existante"""    # V√©rifier que l'utilisateur est administrateur
    try:
        profile = request.user.profile
        if profile.role.name != 'admin':
            return HttpResponseForbidden("Acc√®s interdit : seuls les administrateurs peuvent modifier les cat√©gories.")
    except UserProfile.DoesNotExist:
        from .models import Role
        default_roles = Role.get_default_roles()
        UserProfile.objects.create(user=request.user, role=default_roles['lecteur'])
        return HttpResponseForbidden("Acc√®s interdit : seuls les administrateurs peuvent modifier les cat√©gories.")
    
    category = get_object_or_404(Category, id=category_id)
    
    if request.method == 'POST':
        form = CategoryForm(request.POST, instance=category)
        if form.is_valid():
            form.save()
            messages.success(request, _(f'Cat√©gorie "{category.nom}" modifi√©e avec succ√®s!'))
            return redirect('gerer_categories')
    else:
        form = CategoryForm(instance=category)
    
    context = {
        'form': form,
        'category': category,
    }
    return render(request, 'blog/modifier_categorie.html', context)


@login_required
def supprimer_categorie(request, category_id):
    """Vue pour supprimer une cat√©gorie"""    # V√©rifier que l'utilisateur est administrateur
    try:
        profile = request.user.profile
        if profile.role.name != 'admin':
            return HttpResponseForbidden("Acc√®s interdit : seuls les administrateurs peuvent supprimer les cat√©gories.")
    except UserProfile.DoesNotExist:
        from .models import Role
        default_roles = Role.get_default_roles()
        UserProfile.objects.create(user=request.user, role=default_roles['lecteur'])
        return HttpResponseForbidden("Acc√®s interdit : seuls les administrateurs peuvent supprimer les cat√©gories.")
    
    # Translating the docstring for consistency
    category = get_object_or_404(Category, id=category_id)
    
    if request.method == 'POST':
        category_name = category.nom
        category.delete()
        messages.success(request, _(f'Cat√©gorie "{category_name}" supprim√©e avec succ√®s!'))
        return redirect('gerer_categories')
    
    context = {
        'category': category,
    }
    return render(request, 'blog/supprimer_categorie.html', context)


@login_required
def modifier_article(request, article_id):
    """Vue pour modifier un article existant"""    # V√©rifier que l'utilisateur est journaliste ou administrateur
    try:
        profile = request.user.profile
        if profile.role.name not in ['journaliste', 'admin']:
            return HttpResponseForbidden("Acc√®s interdit : seuls les journalistes et administrateurs peuvent modifier les articles.")
    except UserProfile.DoesNotExist:
        from .models import Role
        default_roles = Role.get_default_roles()
        UserProfile.objects.create(user=request.user, role=default_roles['lecteur'])
        return HttpResponseForbidden("Acc√®s interdit : seuls les journalistes et administrateurs peuvent modifier les articles.")
    
    article = get_object_or_404(Article, id=article_id)
    
    # Si l'utilisateur est journaliste, v√©rifier qu'il est l'auteur de l'article
    if profile.role.name == 'journaliste':
        if article.auteur.lower() != request.user.username.lower():
            return HttpResponseForbidden("Acc√®s interdit : vous ne pouvez modifier que vos propres articles.")
    
    if request.method == 'POST':
        form = ArticleForm(request.POST, request.FILES, instance=article)
        if form.is_valid():
            form.save()
            messages.success(request, _(f'Article "{article.titre}" modifi√© avec succ√®s!'))
            return redirect('article_detail', article_id=article.id)
    else:
        form = ArticleForm(instance=article)
    
    context = {
        'form': form,
        'article': article,
    }
    return render(request, 'blog/modifier_article.html', context)


@login_required
def supprimer_article(request, article_id):
    """Vue pour supprimer un article"""    # V√©rifier que l'utilisateur est journaliste ou administrateur
    try:
        profile = request.user.profile
        if profile.role.name not in ['journaliste', 'admin']:
            return HttpResponseForbidden("Acc√®s interdit : seuls les journalistes et administrateurs peuvent supprimer les articles.")
    except UserProfile.DoesNotExist:
        from .models import Role
        default_roles = Role.get_default_roles()
        UserProfile.objects.create(user=request.user, role=default_roles['lecteur'])
        return HttpResponseForbidden("Acc√®s interdit : seuls les journalistes et administrateurs peuvent supprimer les articles.")
    
    article = get_object_or_404(Article, id=article_id)
    
    # Si l'utilisateur est journaliste, v√©rifier qu'il est l'auteur de l'article
    if profile.role.name == 'journaliste':
        if article.auteur.lower() != request.user.username.lower():
            return HttpResponseForbidden("Acc√®s interdit : vous ne pouvez supprimer que vos propres articles.")
    
    if request.method == 'POST':
        article_title = article.titre
        article.delete()
        messages.success(request, _(f'Article "{article_title}" supprim√© avec succ√®s!'))
        return redirect('home')
    
    context = {
        'article': article,
    }
    return render(request, 'blog/supprimer_article.html', context)


@login_required
def gerer_articles(request):
    """Vue pour afficher la liste des articles avec options de gestion"""    # V√©rifier que l'utilisateur est journaliste ou administrateur
    try:
        profile = request.user.profile
        if profile.role.name not in ['journaliste', 'admin']:
            return HttpResponseForbidden("Acc√®s interdit : seuls les journalistes et administrateurs peuvent g√©rer les articles.")
    except UserProfile.DoesNotExist:
        from .models import Role
        default_roles = Role.get_default_roles()
        UserProfile.objects.create(user=request.user, role=default_roles['lecteur'])
        return HttpResponseForbidden("Acc√®s interdit : seuls les journalistes et administrateurs peuvent g√©rer les articles.")
    
    articles = Article.objects.all().order_by('-date_creation')
    categories = Category.objects.all()
    category_filter = request.GET.get('category')
    
    if category_filter:
        articles = articles.filter(category_id=category_filter)
    
    context = {
        'articles': articles,
        'categories': categories,
        'selected_category': int(category_filter) if category_filter else None
    }
    return render(request, 'blog/gerer_articles.html', context)

# Create your views here.

def register_view(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, _('Registration successful!'))
            return redirect('home')
    else:
        form = UserCreationForm()    # Ajoute les langues dans le contexte
    languages = []  # Simplifi√© pour √©viter l'erreur d'import

    return render(request, 'blog/auth/register.html', {
        'form': form,
        'languages': languages,  # Ajoute √ßa
    })

def login_view(request):
    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                messages.success(request, _(f'Welcome, {username}! You are now logged in.'))
                return redirect('home')
            else:
                messages.error(request, _('Invalid username or password.'))
        else:
            messages.error(request, _('Invalid username or password.'))
    else:
        form = AuthenticationForm()
    return render(request, 'blog/auth/login.html', {'form': form})

def logout_view(request):
    logout(request)
    messages.info(request, _('You have been logged out.'))
    return render(request, 'blog/auth/logout.html')



def page_admin(request):
    """Vue r√©serv√©e aux administrateurs"""
    if not request.user.is_authenticated:
        return redirect('login')
      # V√©rifier le r√¥le de l'utilisateur
    try:
        profile = request.user.profile
        if profile.role.name != 'admin':
            return HttpResponseForbidden("Acc√®s interdit : vous devez √™tre administrateur pour acc√©der √† cette page.")
    except UserProfile.DoesNotExist:
        # Cr√©er un profil par d√©faut si il n'existe pas
        from .models import Role
        default_roles = Role.get_default_roles()
        UserProfile.objects.create(user=request.user, role=default_roles['lecteur'])
        return HttpResponseForbidden("Acc√®s interdit : vous devez √™tre administrateur pour acc√©der √† cette page.")
    
    return render(request, 'blog/admin/page_admin.html', {
        'title': 'Page Administrateur',
        'message': 'Bienvenue dans l\'espace administrateur !'
    })


def page_journaliste(request):
    """Vue r√©serv√©e aux journalistes et admins"""
    if not request.user.is_authenticated:
        return redirect('login')
    
    try:
        profile = request.user.profile
        if profile.role.name not in ['journaliste', 'admin']:
            return HttpResponseForbidden("Acc√®s interdit : vous devez √™tre journaliste ou administrateur pour acc√©der √† cette page.")
    except UserProfile.DoesNotExist:
        from .models import Role
        default_roles = Role.get_default_roles()
        UserProfile.objects.create(user=request.user, role=default_roles['lecteur'])
        return HttpResponseForbidden("Acc√®s interdit : vous devez √™tre journaliste ou administrateur pour acc√©der √† cette page.")
      # Calcul des statistiques pour le journaliste
    from django.utils import timezone
    from datetime import datetime, timedelta
    from .models import Comment
    
    # Articles de l'utilisateur actuel (si journaliste) ou tous les articles (si admin)
    if profile.role.name == 'journaliste':
        # Pour un journaliste, on cherche les articles qui correspondent √† son nom d'utilisateur 
        # ou aux variations possibles de son nom
        user_articles = Article.objects.filter(
            auteur__icontains=request.user.username
        ) or Article.objects.filter(
            auteur__icontains=request.user.first_name
        ) or Article.objects.filter(
            auteur__icontains=request.user.last_name
        )
        # Si aucun article trouv√© avec ces crit√®res, utiliser le nom d'utilisateur exact
        if not user_articles.exists():
            user_articles = Article.objects.filter(auteur=request.user.username)
    else:
        # Pour un admin, afficher tous les articles
        user_articles = Article.objects.all()
    
    # Articles cr√©√©s ce mois-ci
    current_month = timezone.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    recent_articles = user_articles.filter(date_creation__gte=current_month)
    
    # Commentaires re√ßus sur les articles de l'utilisateur
    user_comments = Comment.objects.filter(article__in=user_articles)
    
    context = {
        'title': 'Espace Journaliste',
        'message': 'Bienvenue dans l\'espace journaliste !',
        'user_articles': user_articles.count(),
        'recent_articles': recent_articles.count(),
        'user_comments': user_comments.count(),
        'user_role': profile.role.name,
    }
    
    return render(request, 'blog/admin/page_journaliste.html', context)


def diagnostic_images(request):
    """Vue Django compl√®te pour le diagnostic des images - Remplace le JavaScript"""
    logger.info(f"Diagnostic des images demand√© par l'utilisateur {request.user}")
    
    import os
    from urllib.parse import unquote
    import mimetypes
    
    # R√©cup√©ration des articles avec images
    articles = Article.objects.exclude(image='')
    
    # Informations syst√®me
    system_info = {
        'total_articles': Article.objects.count(),
        'articles_with_images': articles.count(),
        'media_root': settings.MEDIA_ROOT,
        'media_url': settings.MEDIA_URL,
        'debug_mode': settings.DEBUG,
    }
    
    # Test de chaque image
    image_tests = []
    for article in articles:
        if article.image:
            # Chemin physique du fichier
            image_path = os.path.join(settings.MEDIA_ROOT, article.image.name)
            
            # Tests de validation
            test_result = {
                'article_title': article.titre,
                'image_name': article.image.name,
                'image_url': article.image.url,
                'image_path': image_path,
                'file_exists': os.path.exists(image_path),
                'file_size': 0,
                'file_size_human': '0 B',
                'mime_type': 'unknown',
                'is_readable': False,
                'url_encoded_correctly': False,
                'status': 'unknown'
            }
            
            # V√©rification de l'existence du fichier
            if test_result['file_exists']:
                try:
                    # Taille du fichier
                    test_result['file_size'] = os.path.getsize(image_path)
                    test_result['file_size_human'] = format_file_size(test_result['file_size'])
                    
                    # Type MIME
                    mime_type, _ = mimetypes.guess_type(image_path)
                    test_result['mime_type'] = mime_type or 'unknown'
                    
                    # Test de lecture
                    test_result['is_readable'] = os.access(image_path, os.R_OK)
                    
                    # Test d'encodage URL
                    decoded_url = unquote(article.image.url)
                    test_result['url_encoded_correctly'] = decoded_url == article.image.url
                    
                    # Statut global
                    if test_result['is_readable'] and test_result['file_size'] > 0:
                        test_result['status'] = 'success'
                    else:
                        test_result['status'] = 'warning'
                        
                except Exception as e:
                    logger.error(f"Erreur lors du test de l'image {article.image.name}: {e}")
                    test_result['status'] = 'error'
                    test_result['error_message'] = str(e)
            else:
                test_result['status'] = 'error'
                test_result['error_message'] = 'Fichier non trouv√©'
            
            image_tests.append(test_result)
    
    # V√©rification du dossier media/articles
    articles_dir = os.path.join(settings.MEDIA_ROOT, 'articles')
    directory_info = {
        'path': articles_dir,
        'exists': os.path.exists(articles_dir),
        'is_writable': os.access(articles_dir, os.W_OK) if os.path.exists(articles_dir) else False,
        'files': []
    }
    
    if directory_info['exists']:
        try:
            files = os.listdir(articles_dir)
            for file in files:
                file_path = os.path.join(articles_dir, file)
                if os.path.isfile(file_path):
                    file_size = os.path.getsize(file_path)
                    directory_info['files'].append({
                        'name': file,
                        'size': file_size,
                        'size_human': format_file_size(file_size),
                        'is_used': any(test['image_name'].endswith(file) for test in image_tests)
                    })
        except Exception as e:
            logger.error(f"Erreur lors de la lecture du dossier media: {e}")
            directory_info['error'] = str(e)
    
    # Statistiques globales
    stats = {
        'total_tests': len(image_tests),
        'successful_tests': len([t for t in image_tests if t['status'] == 'success']),
        'warning_tests': len([t for t in image_tests if t['status'] == 'warning']),
        'error_tests': len([t for t in image_tests if t['status'] == 'error']),
    }
    
    context = {
        'system_info': system_info,
        'image_tests': image_tests,
        'directory_info': directory_info,
        'stats': stats,
        'debug_mode': settings.DEBUG,
    }
    
    logger.info(f"Diagnostic termin√©: {stats['successful_tests']}/{stats['total_tests']} images OK")
    
    return render(request, 'blog/diagnostic_images.html', context)


def format_file_size(size_bytes):
    """Formate la taille de fichier en format humain"""
    if size_bytes == 0:
        return "0 B"
    size_names = ["B", "KB", "MB", "GB"]
    import math
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    return f"{s} {size_names[i]}"


@login_required
@require_POST
def toggle_like(request, article_id):
    """
    Vue pour liker/unliker un article.
    Redirige vers la page d'origine avec un message de confirmation.
    """
    try:
        article = get_object_or_404(Article, id=article_id)
        like, created = Like.objects.get_or_create(
            user=request.user,
            article=article
        )
        
        if not created:
            # L'utilisateur avait d√©j√† lik√©, on supprime le like
            like.delete()
            message = _("Like retir√©")
            logger.info(f"Utilisateur {request.user.username} a retir√© son like de l'article '{article.titre}'")
        else:
            # Nouveau like cr√©√©
            message = _("Article lik√©")
            logger.info(f"Utilisateur {request.user.username} a lik√© l'article '{article.titre}'")
        
        # Ajouter le message de succ√®s
        messages.success(request, message)
        
        # Rediriger vers la page pr√©c√©dente ou vers l'article
        redirect_url = request.META.get('HTTP_REFERER')
        if redirect_url:
            return redirect(redirect_url)
        else:
            return redirect('article_detail', article_id=article.id)
        
    except Exception as e:
        logger.error(f"Erreur lors du toggle like pour l'article {article_id}: {e}")
        messages.error(request, _("Une erreur s'est produite lors du like"))
        # Rediriger vers la page pr√©c√©dente ou vers l'article en cas d'erreur
        redirect_url = request.META.get('HTTP_REFERER')
        if redirect_url:
            return redirect(redirect_url)
        else:
            return redirect('article_detail', article_id=article.id)


def test_like_debug(request):
    """Vue de debug pour tester la fonctionnalit√© Like"""
    if not request.user.is_authenticated:
        return redirect('login')
    
    # R√©cup√©rer le premier article pour le test
    article = Article.objects.first()
    if not article:
        return HttpResponse("Aucun article trouv√©. Cr√©ez d'abord un article.")
    
    context = {
        'article': article,
        'is_liked': article.is_liked_by(request.user),
        'total_likes': article.get_total_likes(),
    }
    
    return render(request, 'blog/debug_like.html', context)


@login_required
def profile_view(request):
    """
    Vue pour afficher le profil utilisateur avec ses statistiques
    """
    logger.info(f"Acc√®s au profil par l'utilisateur {request.user}")
    
    try:
        user = request.user
        
        # R√©cup√©rer ou cr√©er le profil utilisateur
        profile, created = UserProfile.objects.get_or_create(user=user)
        
        # Statistiques des likes
        liked_articles = Article.objects.filter(
            likes__user=user
        ).select_related('category').order_by('-likes__created_at')[:10]
        
        # Nombre total d'articles lik√©s
        total_liked_articles = user.likes.count()
        
        # Commentaires post√©s par l'utilisateur
        user_comments = Comment.objects.filter(
            email=user.email
        ).select_related('article').order_by('-date_creation')[:10]
        total_comments = Comment.objects.filter(email=user.email).count()
        
        # Articles r√©cemment lik√©s (5 derniers)
        recent_liked_articles = Article.objects.filter(
            likes__user=user
        ).select_related('category').order_by('-likes__created_at')[:5]
        
        # Statistiques g√©n√©rales
        total_articles_platform = Article.objects.count()
        total_categories = Category.objects.count()
        
        logger.debug(f"Profil charg√© pour {user.username}: {total_liked_articles} likes, {total_comments} commentaires")
        
        context = {
            'user_profile': profile,
            'liked_articles': liked_articles,
            'total_liked_articles': total_liked_articles,
            'user_comments': user_comments,
            'total_comments': total_comments,
            'recent_liked_articles': recent_liked_articles,
            'total_articles_platform': total_articles_platform,
            'total_categories': total_categories,
        }
        
        return render(request, 'blog/profile.html', context)
        
    except Exception as e:
        logger.error(f"Erreur lors du chargement du profil pour {request.user}: {e}")
        messages.error(request, _('Une erreur est survenue lors du chargement de votre profil.'))
        return redirect('home')


def search_view(request):
    """
    Vue de recherche avanc√©e pour les articles avec pagination et tri par pertinence
    """
    logger.info(f"Recherche effectu√©e par l'utilisateur {request.user}")
    
    form = SearchForm(request.GET or None)
    articles = []
    query = ""
    total_results = 0
    page_obj = None
    
    if form.is_valid():
        query = form.cleaned_data.get('query', '').strip()
        
        if query:
            logger.debug(f"Requ√™te de recherche: '{query}'")
            
            # Diviser la requ√™te en mots individuels pour une recherche plus flexible
            search_terms = [term.strip() for term in query.split() if term.strip()]
            
            if search_terms:
                # Construction de la requ√™te Q pour rechercher dans plusieurs champs
                q_objects = Q()
                
                for term in search_terms:
                    # Recherche dans le titre, contenu et auteur
                    term_query = (
                        Q(titre__icontains=term) |
                        Q(contenu__icontains=term) |
                        Q(auteur__icontains=term)
                    )
                    q_objects &= term_query
                
                # R√©cup√©ration des articles avec calcul de pertinence
                articles_queryset = Article.objects.filter(q_objects).select_related('category').annotate(
                    # Calcul du score de pertinence
                    relevance_score=Count(
                        Case(
                            # Titre : poids plus √©lev√©
                            *[When(titre__icontains=term, then=1) for term in search_terms],
                            # Contenu : poids moyen  
                            *[When(contenu__icontains=term, then=1) for term in search_terms],
                            # Auteur : poids plus faible
                            *[When(auteur__icontains=term, then=1) for term in search_terms],
                            output_field=IntegerField(),
                        )
                    ),
                    # Ajout du nombre de likes pour affichage
                    total_likes=Count('likes')
                ).order_by('-relevance_score', '-date_creation').distinct()
                
                total_results = articles_queryset.count()
                logger.debug(f"Nombre de r√©sultats trouv√©s: {total_results}")
                
                # Pagination avec 10 r√©sultats par page
                paginator = Paginator(articles_queryset, 10)
                page_number = request.GET.get('page', 1)
                
                try:
                    page_obj = paginator.get_page(page_number)
                    articles = page_obj.object_list
                except (PageNotAnInteger, EmptyPage):
                    logger.warning(f"Num√©ro de page invalide: {page_number}")
                    page_obj = paginator.get_page(1)
                    articles = page_obj.object_list
            else:
                logger.debug("Requ√™te de recherche vide apr√®s nettoyage")
        else:
            logger.debug("Aucune requ√™te de recherche fournie")
    else:
        logger.debug("Formulaire de recherche invalide")
    
    # Pr√©paration du contexte
    context = {
        'form': form,
        'articles': articles,
        'query': query,
        'total_results': total_results,
        'page_obj': page_obj,
        'search_terms': query.split() if query else [],
    }
    
    return render(request, 'blog/search_results.html', context)


def highlight_search_terms(text, search_terms, max_length=200):
    """
    Fonction utilitaire pour surligner les termes de recherche dans le texte
    et cr√©er un extrait pertinent
    """
    if not search_terms or not text:
        return text[:max_length] + '...' if len(text) > max_length else text
    
    # Trouver la premi√®re occurrence d'un terme de recherche
    text_lower = text.lower()
    first_match_pos = len(text)
    
    for term in search_terms:
        term_lower = term.lower()
        pos = text_lower.find(term_lower)
        if pos != -1 and pos < first_match_pos:
            first_match_pos = pos
    
    # Si aucun terme trouv√©, retourner le d√©but du texte
    if first_match_pos == len(text):
        return text[:max_length] + '...' if len(text) > max_length else text
    
    # Cr√©er un extrait centr√© sur la premi√®re occurrence
    start = max(0, first_match_pos - 50)
    end = min(len(text), start + max_length)
    excerpt = text[start:end]
    
    # Ajouter des points de suspension si n√©cessaire
    if start > 0:
        excerpt = '...' + excerpt
    if end < len(text):
        excerpt = excerpt + '...'
    
    # Surligner les termes de recherche
    for term in search_terms:
        if term:
            # Utiliser une regex insensible √† la casse
            pattern = re.compile(re.escape(term), re.IGNORECASE)
            excerpt = pattern.sub(f'<mark class="search-highlight">{term}</mark>', excerpt)
    
    return excerpt


@login_required
def comment_moderation_view(request):
    """
    Vue pour la mod√©ration des commentaires.
    Les admins peuvent voir tous les commentaires.
    Les journalistes ne peuvent voir que les commentaires sur leurs articles.
    """    # V√©rifier que l'utilisateur est journaliste ou administrateur
    try:
        profile = request.user.profile
        if profile.role.name not in ['journaliste', 'admin']:
            return HttpResponseForbidden("Acc√®s interdit : seuls les journalistes et administrateurs peuvent mod√©rer les commentaires.")
    except UserProfile.DoesNotExist:
        from .models import Role
        default_roles = Role.get_default_roles()
        UserProfile.objects.create(user=request.user, role=default_roles['lecteur'])
        return HttpResponseForbidden("Acc√®s interdit : seuls les journalistes et administrateurs peuvent mod√©rer les commentaires.")
    
    # Traitement des actions POST
    if request.method == 'POST':
        action = request.POST.get('action')
        comment_id = request.POST.get('comment_id')
        
        if comment_id:
            try:
                comment = Comment.objects.select_related('article').get(id=comment_id)
                  # V√©rifier les permissions pour les journalistes
                if profile.role.name == 'journaliste':
                    if comment.article.auteur.lower() != request.user.username.lower():
                        return HttpResponseForbidden("Vous ne pouvez mod√©rer que les commentaires sur vos propres articles.")
                
                if action == 'approve':
                    comment.is_approved = True
                    comment.save()
                    messages.success(request, _('Commentaire approuv√© avec succ√®s'))
                    logger.info(f"Utilisateur {request.user.username} a approuv√© le commentaire {comment_id}")
                    
                elif action == 'disapprove':
                    comment.is_approved = False
                    comment.save()
                    messages.success(request, _('Commentaire d√©sapprouv√© avec succ√®s'))
                    logger.info(f"Utilisateur {request.user.username} a d√©sapprouv√© le commentaire {comment_id}")
                    
                elif action == 'delete':
                    comment_info = f"'{comment.contenu[:50]}...' de {comment.nom}"
                    comment.delete()
                    messages.success(request, _('Commentaire supprim√© avec succ√®s'))
                    logger.info(f"Utilisateur {request.user.username} a supprim√© le commentaire {comment_info}")
                    
                elif action == 'reply':
                    reply_content = request.POST.get('reply_content', '').strip()
                    if reply_content:
                        Comment.objects.create(
                            article=comment.article,
                            nom=f"{request.user.username} (Mod√©rateur)",
                            email=request.user.email or 'moderateur@blog.com',
                            contenu=reply_content,
                            parent=comment,
                            is_approved=True  # Les r√©ponses des mod√©rateurs sont automatiquement approuv√©es
                        )
                        messages.success(request, _('R√©ponse ajout√©e avec succ√®s'))
                        logger.info(f"Utilisateur {request.user.username} a r√©pondu au commentaire {comment_id}")
                    else:
                        messages.error(request, _('Le contenu de la r√©ponse ne peut pas √™tre vide'))
                        
            except Comment.DoesNotExist:
                messages.error(request, _('Commentaire introuvable'))
        
        return redirect('comment_moderation')
    
    # R√©cup√©ration et filtrage des commentaires
    comments_query = Comment.objects.select_related('article', 'parent').prefetch_related('replies')
      # Filtrage selon le r√¥le
    if profile.role.name == 'journaliste':
        # Les journalistes ne voient que les commentaires sur leurs articles (auteur = username exact, insensible √† la casse)
        user_articles = Article.objects.filter(auteur__iexact=request.user.username)
        comments_query = comments_query.filter(article__in=user_articles)
        available_articles = user_articles
    else:
        # Les admins voient tous les commentaires
        available_articles = Article.objects.all()
    
    # Filtres de l'interface
    status_filter = request.GET.get('status', '')
    article_filter = request.GET.get('article', '')
    
    # Appliquer les filtres
    if status_filter == 'pending':
        comments_query = comments_query.filter(is_approved=False)
    elif status_filter == 'approved':
        comments_query = comments_query.filter(is_approved=True)
    
    if article_filter:
        comments_query = comments_query.filter(article_id=article_filter)
    
    # Tri par date de cr√©ation (plus r√©cents en premier)
    comments_query = comments_query.order_by('-date_creation')
    
    # Pagination
    from django.core.paginator import Paginator
    paginator = Paginator(comments_query, 20)  # 20 commentaires par page
    page_number = request.GET.get('page')
    comments = paginator.get_page(page_number)
    
    # Statistiques
    total_comments = Comment.objects.count() if profile.role == 'admin' else Comment.objects.filter(article__in=available_articles).count()
    pending_comments = Comment.objects.filter(is_approved=False).count() if profile.role == 'admin' else Comment.objects.filter(article__in=available_articles, is_approved=False).count()
    approved_comments = Comment.objects.filter(is_approved=True).count() if profile.role == 'admin' else Comment.objects.filter(article__in=available_articles, is_approved=True).count()
    
    context = {
        'comments': comments,
        'available_articles': available_articles,
        'selected_status': status_filter,
        'selected_article': int(article_filter) if article_filter else None,
        'user_role': profile.role,
        'total_comments': total_comments,
        'pending_comments': pending_comments,
        'approved_comments': approved_comments,
        'is_paginated': comments.has_other_pages(),
    }
    
    return render(request, 'blog/moderation.html', context)


def password_reset_view(request):
    """Vue pour demander la r√©initialisation du mot de passe"""
    if request.method == 'POST':
        form = PasswordResetForm(request.POST)
        if form.is_valid():
            email = form.cleaned_data['email']
            print(f"[DEBUG] Email saisi par l'utilisateur: {email}")
            # V√©rifier si l'email existe dans la base de donn√©es
            User = get_user_model()
            try:
                user = User.objects.get(email=email)
                
                # G√©n√©rer le token de r√©initialisation
                token = default_token_generator.make_token(user)
                uid = urlsafe_base64_encode(force_bytes(user.pk))
                  # Construire l'URL de r√©initialisation
                current_site = get_current_site(request)
                reset_url = f"http://{current_site.domain}/password-reset-confirm/{uid}/{token}/"
                  # Envoyer l'email (version simplifi√©e - en production, utiliser des templates HTML)
                subject = _('R√©initialisation de votre mot de passe')
                message = _(f'Cliquez sur ce lien pour r√©initialiser votre mot de passe: {reset_url}')
                
                try:
                    send_mail(
                        subject,
                        message,
                        settings.DEFAULT_FROM_EMAIL,  # Utilise l'email configur√© dans settings
                        [email],
                        fail_silently=False,
                    )
                    messages.success(request, _('Un email de r√©initialisation a √©t√© envoy√© √† votre adresse.'))
                    # Log pour debug
                    logger.info(f"Email de r√©initialisation envoy√© de {settings.DEFAULT_FROM_EMAIL} vers {email}")
                except Exception as e:
                    # En cas d'erreur d'envoi d'email, afficher le lien directement (pour le d√©veloppement)
                    logger.error(f"Erreur d'envoi d'email vers {email}: {str(e)}")
                    messages.warning(request, _(f'Erreur d\'envoi d\'email vers {email}. Lien de r√©initialisation: {reset_url}'))
                
            except User.DoesNotExist:
                # Pour la s√©curit√©, on affiche le m√™me message m√™me si l'email n'existe pas
                messages.success(request, _('Un email de r√©initialisation a √©t√© envoy√© √† votre adresse.'))
            
            return redirect('login')
    else:
        form = PasswordResetForm()
    
    return render(request, 'blog/auth/password_reset.html', {'form': form})

def password_reset_confirm_view(request, uidb64, token):
    """Vue pour confirmer la r√©initialisation du mot de passe"""
    User = get_user_model()
    
    try:
        uid = force_str(urlsafe_base64_decode(uidb64))
        user = User.objects.get(pk=uid)
    except (TypeError, ValueError, OverflowError, User.DoesNotExist):
        user = None
    
    if user is not None and default_token_generator.check_token(user, token):
        if request.method == 'POST':
            form = SetPasswordForm(user, request.POST)
            if form.is_valid():
                form.save()
                messages.success(request, _('Votre mot de passe a √©t√© r√©initialis√© avec succ√®s.'))
                return redirect('login')
        else:
            form = SetPasswordForm(user)
        
        return render(request, 'blog/auth/password_reset_confirm.html', {
            'form': form,
            'validlink': True
        })
    else:
        return render(request, 'blog/auth/password_reset_confirm.html', {
            'validlink': False
        })
