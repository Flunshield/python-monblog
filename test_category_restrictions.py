"""
Test des restrictions de r√¥les pour la gestion des cat√©gories
"""
import os
import sys
import django

# Configuration Django pour les tests
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'monprojet.settings')
django.setup()

from django.test import TestCase, Client
from django.contrib.auth.models import User
from django.urls import reverse
from blog.models import UserProfile, Category


class CategoryRoleRestrictionsTest(TestCase):
    """Tests pour v√©rifier que seuls les admins peuvent g√©rer les cat√©gories"""
    
    def setUp(self):
        """Configuration initiale pour chaque test"""
        self.client = Client()
        
        # Cr√©er diff√©rents types d'utilisateurs
        self.admin_user = User.objects.create_user(
            username='admin_test',
            password='testpass123'
        )
        self.admin_profile = UserProfile.objects.create(
            user=self.admin_user,
            role='admin'
        )
        
        self.journaliste_user = User.objects.create_user(
            username='journaliste_test',
            password='testpass123'
        )
        self.journaliste_profile = UserProfile.objects.create(
            user=self.journaliste_user,
            role='journaliste'
        )
        
        self.lecteur_user = User.objects.create_user(
            username='lecteur_test',
            password='testpass123'
        )
        self.lecteur_profile = UserProfile.objects.create(
            user=self.lecteur_user,
            role='lecteur'
        )
        
        # Cr√©er une cat√©gorie de test
        self.test_category = Category.objects.create(
            nom='Cat√©gorie Test',
            description='Une cat√©gorie pour les tests'
        )
    
    def test_admin_can_access_category_management(self):
        """Test que l'admin peut acc√©der √† la gestion des cat√©gories"""
        self.client.login(username='admin_test', password='testpass123')
        
        # Test d'acc√®s √† la page de gestion des cat√©gories
        response = self.client.get(reverse('gerer_categories'))
        self.assertEqual(response.status_code, 200)
        
        # Test d'acc√®s √† la page d'ajout de cat√©gorie
        response = self.client.get(reverse('ajouter_categorie'))
        self.assertEqual(response.status_code, 200)
        
        # Test d'acc√®s √† la modification
        response = self.client.get(reverse('modifier_categorie', args=[self.test_category.id]))
        self.assertEqual(response.status_code, 200)
        
        print("‚úÖ Admin peut acc√©der √† toutes les fonctions de gestion des cat√©gories")
    
    def test_journaliste_cannot_access_category_management(self):
        """Test que le journaliste ne peut PAS acc√©der √† la gestion des cat√©gories"""
        self.client.login(username='journaliste_test', password='testpass123')
        
        # Test d'acc√®s √† la page de gestion des cat√©gories
        response = self.client.get(reverse('gerer_categories'))
        self.assertEqual(response.status_code, 403)  # Forbidden
        
        # Test d'acc√®s √† la page d'ajout de cat√©gorie
        response = self.client.get(reverse('ajouter_categorie'))
        self.assertEqual(response.status_code, 403)  # Forbidden
        
        # Test d'acc√®s √† la modification
        response = self.client.get(reverse('modifier_categorie', args=[self.test_category.id]))
        self.assertEqual(response.status_code, 403)  # Forbidden
        
        # Test d'acc√®s √† la suppression
        response = self.client.get(reverse('supprimer_categorie', args=[self.test_category.id]))
        self.assertEqual(response.status_code, 403)  # Forbidden
        
        print("‚úÖ Journaliste ne peut PAS acc√©der aux fonctions de gestion des cat√©gories")
    
    def test_lecteur_cannot_access_category_management(self):
        """Test que le lecteur ne peut PAS acc√©der √† la gestion des cat√©gories"""
        self.client.login(username='lecteur_test', password='testpass123')
        
        # Test d'acc√®s √† la page de gestion des cat√©gories
        response = self.client.get(reverse('gerer_categories'))
        self.assertEqual(response.status_code, 403)  # Forbidden
        
        # Test d'acc√®s √† la page d'ajout de cat√©gorie
        response = self.client.get(reverse('ajouter_categorie'))
        self.assertEqual(response.status_code, 403)  # Forbidden
        
        print("‚úÖ Lecteur ne peut PAS acc√©der aux fonctions de gestion des cat√©gories")
    
    def test_anonymous_user_redirected_to_login(self):
        """Test que les utilisateurs non connect√©s sont redirig√©s vers la connexion"""
        # Test d'acc√®s √† la page de gestion des cat√©gories
        response = self.client.get(reverse('gerer_categories'))
        self.assertEqual(response.status_code, 302)  # Redirect to login
        
        # Test d'acc√®s √† la page d'ajout de cat√©gorie
        response = self.client.get(reverse('ajouter_categorie'))
        self.assertEqual(response.status_code, 302)  # Redirect to login
        
        print("‚úÖ Utilisateurs anonymes sont redirig√©s vers la connexion")
    
    def test_admin_can_create_category(self):
        """Test que l'admin peut cr√©er une nouvelle cat√©gorie"""
        self.client.login(username='admin_test', password='testpass123')
        
        category_data = {
            'nom': 'Nouvelle Cat√©gorie',
            'description': 'Description de la nouvelle cat√©gorie'
        }
        
        response = self.client.post(reverse('ajouter_categorie'), data=category_data)
        self.assertEqual(response.status_code, 302)  # Redirect apr√®s cr√©ation r√©ussie
        
        # V√©rifier que la cat√©gorie a √©t√© cr√©√©e
        self.assertTrue(Category.objects.filter(nom='Nouvelle Cat√©gorie').exists())
        print("‚úÖ Admin peut cr√©er une nouvelle cat√©gorie")
    
    def test_journaliste_cannot_create_category(self):
        """Test que le journaliste ne peut PAS cr√©er une nouvelle cat√©gorie"""
        self.client.login(username='journaliste_test', password='testpass123')
        
        category_data = {
            'nom': 'Cat√©gorie Interdite',
            'description': 'Cette cat√©gorie ne devrait pas √™tre cr√©√©e'
        }
        
        response = self.client.post(reverse('ajouter_categorie'), data=category_data)
        self.assertEqual(response.status_code, 403)  # Forbidden
        
        # V√©rifier que la cat√©gorie n'a PAS √©t√© cr√©√©e
        self.assertFalse(Category.objects.filter(nom='Cat√©gorie Interdite').exists())
        print("‚úÖ Journaliste ne peut PAS cr√©er une nouvelle cat√©gorie")


def run_tests():
    """Ex√©cute tous les tests"""
    print("üîê Tests des restrictions de r√¥les pour la gestion des cat√©gories")
    print("=" * 60)
    
    import unittest
    
    # Cr√©er une suite de tests
    suite = unittest.TestSuite()
    suite.addTest(CategoryRoleRestrictionsTest('test_admin_can_access_category_management'))
    suite.addTest(CategoryRoleRestrictionsTest('test_journaliste_cannot_access_category_management'))
    suite.addTest(CategoryRoleRestrictionsTest('test_lecteur_cannot_access_category_management'))
    suite.addTest(CategoryRoleRestrictionsTest('test_anonymous_user_redirected_to_login'))
    suite.addTest(CategoryRoleRestrictionsTest('test_admin_can_create_category'))
    suite.addTest(CategoryRoleRestrictionsTest('test_journaliste_cannot_create_category'))
    
    # Ex√©cuter les tests
    runner = unittest.TextTestRunner(verbosity=0)
    result = runner.run(suite)
    
    print("\n" + "=" * 60)
    if result.wasSuccessful():
        print("üéâ Tous les tests sont pass√©s ! Les restrictions de r√¥les fonctionnent correctement.")
        print(f"‚úÖ {result.testsRun} tests ex√©cut√©s avec succ√®s")
    else:
        print("‚ùå Certains tests ont √©chou√©.")
        print(f"üîç {len(result.failures)} √©checs, {len(result.errors)} erreurs")
        
        for test, error in result.failures:
            print(f"‚ùå √âCHEC: {test}")
            print(f"   {error}")
        
        for test, error in result.errors:
            print(f"‚ùå ERREUR: {test}")
            print(f"   {error}")


if __name__ == '__main__':
    run_tests()
